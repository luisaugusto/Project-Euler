/*
Problem [001]: Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
*/
const multiplesOf3Or5 = range => [...Array(range).keys()].filter(num => num % 3 === 0 || num % 5 === 0).reduce((acc, num) => acc + num, 0);

console.time('Problem 1');
console.log(multiplesOf3Or5(1000));
console.timeEnd('Problem 1');

/*
Problem [002]: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
const evenFibonacci = max => {
  let prev = 0;
  let sum = 1;
  let evenSum = 0;

  while (sum + prev <= max) {
    sum += prev;
    prev = sum - prev;

    if (sum % 2 === 0) {
      evenSum += sum;
    }
  }

  return evenSum;
};

console.time('Problem 2');
console.log(evenFibonacci(4000000));
console.timeEnd('Problem 2');

/*
Problem [003]: Largest prime factor
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143?
 */
const largestPrimeFactor = (num, count = 2) => {
  while (count < num) {
    while (num % count === 0) {
      num = num / count;
    }

    count++;
  }

  return num;
};

console.time('Problem 3');
console.log(largestPrimeFactor(600851475143));
console.timeEnd('Problem 3');

/*
Problem [004]: Largest palindrome product
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
 */
const largestPalindrome = () => {
  let palindrome = 0;

  for (let x = 999; x > 99; x--) {
    for (let y = 999; y > 99; y--) {
      const product = x * y;
      if (product < palindrome) break;

      const reverseProduct = product.toString().split('').reverse().join('');

      if (product === Number(reverseProduct)) {
        palindrome = product;
        break;
      }
    }
  }

  return palindrome;
};

console.time('Problem 4');
console.log(largestPalindrome());
console.timeEnd('Problem 4');

/*
Problem [005]: Smallest multiple
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
const smallestMultiple = maxMultiple => {
  let num = maxMultiple;
  let smallestMultipleFound = false;

  while (!smallestMultipleFound) {
    let divisibleByAll = true;

    for (let i = 3; i <= maxMultiple; i++) {
      if (num % i !== 0) {
        divisibleByAll = false;
        break;
      }
    }

    if (divisibleByAll) smallestMultipleFound = true;
    else num += maxMultiple;
  }

  return num;
};

console.time('Problem 5');
console.log(smallestMultiple(20));
console.timeEnd('Problem 5');

/*
Problem [006]: Sum square difference
The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)^2 = 55^2 = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
const sumSquareDiff = max => {
  let sum = 0;
  let squareSum = 0;

  for (let i = 1; i <= max; i++) {
    sum += i;
    squareSum += i * i;
  }

  return sum * sum - squareSum;
};

console.time('Problem 6');
console.log(sumSquareDiff(100));
console.timeEnd('Problem 6');

/*
Problem [007]: 10001st prime
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
 */
const findPrime = num => {
  const prime = {
    index: 0,
    number: 1
  };

  while (prime.index < num) {
    if (prime.number > 2) prime.number += 2;
    else prime.number++;

    let isPrime = true;
    let maxFactor = Math.floor(Math.sqrt(prime.number));

    for (let x = 3; x <= maxFactor; x++) {
      if (prime.number % x === 0) {
        isPrime = false;
        break;
      }
    }

    if (isPrime) prime.index++;
  }

  return prime.number;
};

console.time('Problem 7');
console.log(findPrime(10001));
console.timeEnd('Problem 7');

/*
Problem [008]: Largest product in a series
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
const num =
  '73167176531330624919225119674426574742355349194934' +
  '96983520312774506326239578318016984801869478851843' +
  '85861560789112949495459501737958331952853208805511' +
  '12540698747158523863050715693290963295227443043557' +
  '66896648950445244523161731856403098711121722383113' +
  '62229893423380308135336276614282806444486645238749' +
  '30358907296290491560440772390713810515859307960866' +
  '70172427121883998797908792274921901699720888093776' +
  '65727333001053367881220235421809751254540594752243' +
  '52584907711670556013604839586446706324415722155397' +
  '53697817977846174064955149290862569321978468622482' +
  '83972241375657056057490261407972968652414535100474' +
  '82166370484403199890008895243450658541227588666881' +
  '16427171479924442928230863465674813919123162824586' +
  '17866458359124566529476545682848912883142607690042' +
  '24219022671055626321111109370544217506941658960408' +
  '07198403850962455444362981230987879927244284909188' +
  '84580156166097919133875499200524063689912560717606' +
  '05886116467109405077541002256983155200055935729725' +
  '71636269561882670428252483600823257530420752963450';

const largestProduct = (num, len) => {
  let largestProduct = 0;
  const numArray = num.split('');

  numArray.forEach((digit, index) => {
    if (index + len > num.length) return;
    const product = numArray.slice(index, index + len).reduce((acc, d) => acc * d, 1);
    largestProduct = Math.max(product, largestProduct);
  });

  return largestProduct;
};

console.time('Problem 8');
console.log(largestProduct(num, 13));
console.timeEnd('Problem 8');

/*
Problem [009]: Special Pythagorean triplet
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
 */
const pythagorean = s => {
  let product = 0;

  for (let a = 1; a < s; a++) {
    for (let b = a + 1; b < s; b++) {
      const c = s - b - a;
      if (a*a + b*b === c*c) {
        product = a*b*c;
        break;
      }
    }

    if (product) break;
  }

  return product;
};

console.time('Problem 9');
console.log(pythagorean(1000));
console.timeEnd('Problem 9');

/*
Problem [010]: Summation of primes
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
 */
const sumOfPrimes = max => {
  let sum = 0;
  let num = 1;

  while (num < max) {
    if (num > 2) num += 2;
    else num++;

    let isPrime = true;
    let maxFactor = Math.floor(Math.sqrt(num));

    for (let x = 3; x <= maxFactor; x++) {
      if (num % x === 0) {
        isPrime = false;
        break;
      }
    }

    if (isPrime) sum += num;
  }

  return sum;
};

console.time('Problem 10');
console.log(sumOfPrimes(2000000));
console.timeEnd('Problem 10');

/*
Problem [011]: Largest product in a grid
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
 */
const grid =
  '08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 ' +
  '49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 ' +
  '81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 ' +
  '52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 ' +
  '22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 ' +
  '24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 ' +
  '32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 ' +
  '67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 ' +
  '24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 ' +
  '21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 ' +
  '78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 ' +
  '16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 ' +
  '86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 ' +
  '19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 ' +
  '04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 ' +
  '88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 ' +
  '04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 ' +
  '20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 ' +
  '20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 ' +
  '01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48';

const multiply = (total, num) => total * num;

const largestGridProduct = grid => {
  const numbers = grid.split(' ').map(Number).reduce((acc, num, i) => {
    const arrayIndex = Math.floor(i / 20);
    acc[arrayIndex] = acc[arrayIndex] ? [...acc[arrayIndex], num] : [num];
    return acc;
  }, []);

  let product = 0;

  numbers.forEach((row, y) => {
    row.forEach((num, x) => {
      const rowSets = numbers.slice(y, y + 4);
      const right = row.slice(x, x + 4).reduce(multiply);
      const down = rowSets.map(r => r[x]).reduce(multiply);
      const diagRight = rowSets.map((r, i) => x + i >= r.length ? 1 : r[x + i]).reduce(multiply);
      const diagLeft = rowSets.map((r, i) => x - i < 0 ? 1 : r[x - i]).reduce(multiply);
      product = Math.max(product, right, down, diagLeft, diagRight);
    });
  });

  return product;
};

console.time('Problem 11');
console.log(largestGridProduct(grid));
console.timeEnd('Problem 11');